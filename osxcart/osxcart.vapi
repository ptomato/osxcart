/* osxcart.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Rtf", lower_case_cprefix = "rtf_", gir_namespace = "OsxcartRtf", gir_version = "1.0")]
namespace Rtf {
	[CCode (cprefix = "ERROR_", cheader_filename = "osxcart/rtf.h")]
	public errordomain Error {
		FAILED,
		INVALID_RTF,
		MISSING_PARAMETER,
		MISSING_BRACE,
		EXTRA_CHARACTERS,
		BAD_VERSION,
		UNDEFINED_COLOR,
		UNDEFINED_FONT,
		UNDEFINED_STYLE,
		BAD_HEX_CODE,
		BAD_PICT_TYPE,
		BAD_FONT_SIZE,
		UNSUPPORTED_CHARSET,
	}
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static GLib.Quark error_quark ();
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static Gdk.Atom register_deserialize_format (Gtk.TextBuffer buffer);
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static Gdk.Atom register_serialize_format (Gtk.TextBuffer buffer);
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static bool text_buffer_export (Gtk.TextBuffer buffer, string filename) throws GLib.Error;
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static string text_buffer_export_to_string (Gtk.TextBuffer buffer);
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static bool text_buffer_import (Gtk.TextBuffer buffer, string filename) throws GLib.Error;
	[CCode (cheader_filename = "osxcart/rtf.h")]
	public static bool text_buffer_import_from_string (Gtk.TextBuffer buffer, string string) throws GLib.Error;
}
[CCode (cprefix = "Plist", lower_case_cprefix = "plist_", gir_namespace = "OsxcartPlist", gir_version = "1.0")]
namespace Plist {
	[CCode (cprefix = "ERROR_", cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public errordomain Error {
		FAILED,
		BAD_VERSION,
		UNEXPECTED_OBJECT,
		EXTRANEOUS_KEY,
		MISSING_KEY,
		BAD_DATE,
		NO_ELEMENTS,
	}
	[CCode (cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public static GLib.Quark error_quark ();
	[CCode (cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public static GLib.Variant read (string filename) throws GLib.Error;
	[CCode (cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public static GLib.Variant read_from_string (string string) throws GLib.Error;
	[CCode (cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public static bool write (GLib.Variant plist, string filename) throws GLib.Error;
	[CCode (cheader_filename = "osxcart/rtf.h,osxcart/plist.h")]
	public static string write_to_string (GLib.Variant plist);
}
